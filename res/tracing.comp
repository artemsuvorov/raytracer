#version 460 core

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D screen;

uniform vec3 u_Camera;

vec4 trace_sphere(vec2 uv)
{
    vec3 ray_origin = vec3(0.0, 0.0, 1.0) - u_Camera;
    vec3 ray_direction = normalize(vec3(uv, -1.0));
    float radius = 0.5;
        
    float a = dot(ray_direction, ray_direction);
    float b = 2.0 * dot(ray_origin, ray_direction);
    float c = dot(ray_origin, ray_origin) - radius * radius;
    
    float discriminant = b * b - 4.0 * a * c;
    if (discriminant < 0.0)
        return vec4(0.0);
    
    float t1 = (-b - sqrt(discriminant)) / (2.0 * a);
    vec3 hit_position = ray_origin + ray_direction * t1;
    vec3 normal = normalize(hit_position);
    
    vec3 light_direction = normalize(vec3(-1.0, -1.0, -1.0));
    float cos_angle = dot(normal, -light_direction);
    
    vec3 sphere_color = vec3(1.0, 0.0, 0.0) * cos_angle;
    return vec4(sphere_color, 1.0);
}

void main()
{
    vec4 pixel = vec4(0.0);
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 resolution = imageSize(screen);

    vec2 uv = (coord * 2.0 - resolution.xy) / resolution.y;
    pixel = trace_sphere(uv);
    imageStore(screen, coord, pixel);
}